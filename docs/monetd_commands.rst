.. _monetd_commands_rst:

Monetd Reference
================

``monetd`` provides the core commands needed to configure and run a node. It
has context sensitive help accessed either by running ``monetd help`` or by
adding a ``-h`` parameter to the relevant command.

.. include:: _static/includes/monetd_help.txt
    :code: bash


There are 5 subcommands. ``help`` is described above. The other 4 commands are
described in separate sections below:

- **help** --- show help for the command and subcommands
- **version** --- shows the current version of monetd and subsystems
- **keys** --- creates and manages keys
- **config** --- creates and manages configurations
- **run** --- runs the monet daemon, i.e. starts a node


Global Parameters
-----------------

Global Parameters are available for all subcommands.

- **-d, --datadir string** --- overrides the default location of the
  configuration files
- **-h, --help** --- help command as discussed above
- **-v, --verbose** --- turns on verbose messages. Defaults to false.


Version
-------

The ``version`` subcommand outputs the version number for ``monetd``,
``EVM-Lite``, ``Babble`` and ``Geth``.

If you compile your own tools, the suffices are the GIT branch and the GIT
commit hash.


.. include:: _static/includes/monetd_version.txt
    :code: bash


Keys
----

The ``keys`` subcommand is used to manage Monet Toolchain keys. There are 4
subcommands, each described in a seperate section below:

- **inspect** --- inspect a keyfile
- **list** --- list keyfiles
- **new** --- create a new keyfile
- **update** --- change the passphrase on a keyfile

The ``keys`` subcommand writes and reads keys from the ``keystore`` sub-folder
in the ``monetd`` configuration folder. You can see the location for your
instance with this command:

.. code:: bash

    $ monetd config location -x

The help for the keys command is:


.. include:: _static/includes/monetd_keys_help.txt
    :code: bash




Parameters
~~~~~~~~~~

All of the keys subcommands support the ``--passfile`` flag. This allows you to
pass the path to a plain text file containing the passphrase for your key. This
removes the interactive prompt to enter the passphrase that is the default
mechanism.


Monikers
~~~~~~~~

Keys generated by ``monetd`` have a moniker associated with them. The moniker
is used to manage the keys as it is far more user friendly that an Ethereum
address or public key.

New
~~~

The ``new`` subcommand generates a new key pair and associates it with the
specified moniker. You will be prompted for a passphrase which is used to
encrypt the keyfile. It writes the encrypted keyfile to the ``monetd keystore``
area by default. The moniker must be unique within your keystore. If you
attempt to create a duplicate, the command will abort with an error.

.. code:: bash

    $ monetd keys new -h

    Generate a new key identified by [moniker].

    The keyfile will be written to [datadir]/keystore/[moniker].json. If the
    --passfile flag is not specified, the user will be prompted to enter the
    passphrase manually.

    Usage:
      monetd keys new [moniker] [flags]

    Flags:
      -h, --help   help for new

    Global Flags:
      -d, --datadir string    top-level directory for configuration and data (default "/home/martin/.monet")
          --json              output JSON instead of human-readable format
          --passfile string   file containing the passphrase
      -v, --verbose           verbose output

Inspect
~~~~~~~

.. code:: bash

    $ monetd keys display -h

    Display the contents of a keyfile.

    The output contains the corresponding address and public key. If --private is
    specified, the keyfile will be decrypted with the passphrase and the raw private
    key will also be returned. If --passfile is not specified, the user will be
    prompted to enter the passphrase manually.

    Usage:
      monetd keys inspect [moniker] [flags]

    Flags:
      -h, --help      help for inspect
          --private   include the private key in the output

    Global Flags:
      -d, --datadir string    top-level directory for configuration and data (default "/home/martin/.monet")
          --json              output JSON instead of human-readable format
          --passfile string   file containing the passphrase
      -v, --verbose           verbose output


A sample session showing the command usage with and without the ``--private``
parameter.

.. code:: bash

    $ monetd keys inspect node0 --private
    Passphrase:
    Address:        0x02f6f3D24E447218d396C14F3B47f9Ea369DADf9
    Public key:     0481d3528eec6138f8428932e4fe99571a4f77bd79ae13219540b0a929014cb490a4e5ced2f9e651b531522c2567b6dc5de75d485193615e768b8aa1190603d2c2
    Private key:    bc553aaa7e55c5d0f58f6897ba9bffdb88233c420da622d363f2fe4bd6d78df1

.. code:: bash

    $ monetd keys inspect node0
    Passphrase:
    Address:        0x02f6f3D24E447218d396C14F3B47f9Ea369DADf9
    Public key:     0481d3528eec6138f8428932e4fe99571a4f77bd79ae13219540b0a929014cb490a4e5ced2f9e651b531522c2567b6dc5de75d485193615e768b8aa1190603d2c2

Update
~~~~~~

The ``update`` subcommand allows you to change the passphrase for an encrypted
key file. You are prompted for the old passphrase, then you need to enter, and
confirm, the new passphrase.

You can suppress the prompts by specifying the ``--passfile`` parameter to
supply the current passphrase and ``--new-passphrase`` to supply the new
passphrase.

.. code:: bash

    $ monetd keys update -h

    Change the passphrase on a keyfile.

    If --passfile is not specified, the user will be prompted to enter the current
    passphrase manually. Likewise, if --new-passfile is not specified, the user will
    be prompted to input and confirm the new password.

    Usage:
      monetd keys update [moniker] [flags]

    Flags:
      -h, --help                  help for update
          --new-passfile string   the file containing the new passphrase

    Global Flags:
      -d, --datadir string    top-level directory for configuration and data (default "/home/martin/.monet")
          --json              output JSON instead of human-readable format
          --passfile string   file containing the passphrase
      -v, --verbose           verbose output


An example session updating the passphrase for a key:

.. code:: bash

    $ monetd keys update node0
    Passphrase:
    Please provide a new passphrase
    Passphrase:
    Repeat passphrase:

List
~~~~

The ``list`` subcommand outputs a list of monikers corresponding to the keyfiles
in the keystore. These are the valid monikers that can be specified to other
``monetd`` commands.

.. code:: bash

    $ monetd keys list -h

    List keyfiles in [datadir]/keystore.

    Usage:
      monetd keys list [flags]

    Flags:
      -h, --help   help for list

    Global Flags:
      -d, --datadir string    top-level directory for configuration and data (default "/home/martin/.monet")
          --json              output JSON instead of human-readable format
          --passfile string   file containing the passphrase
      -v, --verbose           verbose output


An example session:

.. code:: bash

    $ monetd keys list
    node0
    node1
    node2


Config
------

The ``config`` subcommand initialises the configuration for a ``monetd`` node.
The folder can be overridden by the ``--datadir`` parameter. The configuration
commands create all the files necessary for a node to join an existing network
or to create a new one.

There are 5 subcommands each described in a separate section below:

- **clear** --- backup and clear configuration folder
- **contract** --- display poa contract
- **location** --- show the location of the configuration files
- **build** --- create the configuration for a single-node network
- **pull** --- pull the configuration files from a node

The two most common scenarios are:

- config build - config build creates the configuration for a single-node
                 network, based on one of the keys in [datadir]/keystore.
                 This is a quick and easy way to get started with ``monetd``.
                 See :ref:`quickstart_rst`.

- config pull - config pull is used to join an existing network. It fetches the
                configuration from one of the existing nodes. See
                :ref:`join_rst`.

For more complex scenarios, please refer to :ref:`giverny_rst`, which is a
specialised Monet Toolchain configuration tool.

Clear
~~~~~

The ``clear`` subcommand safely clears any previous ``monetd`` configurations.
It renames the previous configuration with a ``.~n~`` suffix, where n is the
lowest integer where the resultant filename does not already exist.

The configurations are renamed and not deleted to avoid the potential for
inadvertent deletion of keys.

.. code:: bash

    $ monetd config clear
    Renaming /home/user/.monet to /home/user/.monet.~1~


Contract
~~~~~~~~

The ``contract`` subcommand generates the Solidity source for a POA smart
contract with the supplied node as the sole entry on the initial whitelist.
This command is not used in the standard workflow, but is provided as a
convenient mechanism to retrieve the solidity source.

.. code:: bash

    $ monetd help config contract

    monetd config contract

    Outputs the standard monetd contract, configured with [moniker] as the initial
    whitelist.

    Usage:
    monetd config contract [moniker] [flags]


A sample session is as follows. The contract is written to stdout, so you will
probably wish to redirect it to a file or a pager.

.. code:: bash

    $ monetd config contract node0 | more
    pragma solidity >=0.4.22;

    /// @title Proof of Authority Whitelist Contract

    ...

Location
~~~~~~~~

The ``location`` subcommand displays the path to the configuration folder. With
the ``--expanded`` parameter, a list of directories and configuration files are
output.

.. code:: bash

    $ monetd help config location

    Show the location of the monetd configuration files. If --expanded is specified,
    a detailed list of configuration files and directories is returned.

    Usage:
      monetd config location [flags]

    Flags:
      -x, --expanded   show expanded information
      -h, --help       help for location

    Global Flags:
      -d, --datadir string   top-level directory for configuration and data (default "/home/martin/.monet")
      -v, --verbose          verbose output

.. code:: bash

        $ monetd config location
        /home/user/.monet

.. code:: bash

        $ monetd config location --expanded
        Config root   : /home/user/.monet
        Babble Dir    : /home/user/.monet/babble
        EVM-Lite Dir  : /home/user/.monet/eth
        Keystore Dir  : /home/user/.monet/keystore
        Config File   : /home/user/.monet/monet.toml
        Wallet Config : /home/user/.monet/wallet.toml
        Peers         : /home/user/.monet/babble/peers.json
        Genesis Peers : /home/user/.monet/babble/peers.genesis.json
        Genesis File  : /home/user/.monet/eth/genesis.json


Build
~~~~~

The ``build`` subcommand initialises the bare-bones configuration to start
``monetd``. It uses one of the accounts from the keystore to define a network
consisting of a unique node, which is automatically added to the PoA whitelist.
Additionally, all the accounts in [datadir]/keystore are credited with a large
amount of tokens in the genesis file. This command is mostly used for testing.

If the ``--address`` flag is omitted, the first non-loopback address for this
instance is used.


.. code:: bash

    $ monetd help config build

    Create the configuration for a single-node network.

    Use the keystore account identified by [moniker] to define a network with a
    single node. All the accounts in [datadir]/keystore are also credited with a
    large number of tokens in the genesis file. This command is mostly used for
    testing. If the --address flag is omitted, the first non-loopback address is
    used.

    Usage:
      monetd config build [moniker] [flags]

    Flags:
          --address string    IP/hostname of this node (default "192.168.1.3")
      -h, --help              help for build
          --passfile string   file containing the passphrase


Pull
~~~~

The ``pull`` subcommand is used to join an existing network. It takes the
address of a running peer, and downloads the following set of files into the
configuration directory [datadir]:

- babble/peers.json         : The current validator-set
- babble/peers.genesis.json : The initial validator-set
- eth/genesis.json          : The genesis file

It also builds all the other configuration files required to run a monetd node.
If the peer specified does not include a port, the default gossip port (1337) is
used.

.. code:: bash

    $ monetd help config pull

    The pull subcommand is used to join an existing network. It takes the address
    (host:port) of a running node, and downloads the following set of files into the
    configuration directory [datadir]:

    - babble/peers.json         : The current validator-set
    - babble/peers.genesis.json : The initial validator-set
    - eth/genesis.json          : The genesis file

    Additionally, this command configures the key and network address of the new
    node. The --key flag identifies a keyfile by moniker, which is expected to be in
    the keystore. If --passfile is not specified, the user will be prompted to enter
    the passphrase manually. If the --address flag is omitted, the first
    non-loopback address is used.

    Usage:
      monetd config pull [host:port] [flags]

    Examples:
      monetd config pull "192.168.5.1:8080"

    Flags:
          --address string    IP/hostname of this node (default "192.168.1.3")
      -h, --help              help for pull
          --key string        moniker of the key to use for this node (default "node0")
          --passfile string   file containing the passphrase


Run
---

The ``run`` subcommands starts the monetd node running. Whilst there are legacy
parameters ``--babble.*`` and ``--eth.*``, we strongly recommend that they are
not used. The equivalent changes can be made in the configuration files.

.. code:: bash

    $ monetd help run

    Run a node.

    Use the --datadir flag (-d) to set the node's data directory ($HOME/.monet by
    default on Linux). It should contain a set of files defining the network that
    this node is attempting to join or create. Please refer to the 'monetd config'
    command to manage this configuration. Further options pertaining to the
    operation of monetd can be specified in a monetd.toml file, within the data
    directory, or overwritten by the following flags:

    Usage:
      monetd run [flags]

    Flags:
          --api-listen string           IP:PORT of HTTP API service (default ":8080")
          --babble.bootstrap            bootstrap Babble from database
          --babble.cache-size int       number of items in LRU caches (default 50000)
          --babble.heartbeat duration   heartbeat timer milliseconds (time between gossips) (default 200ms)
          --babble.listen string        IP:PORT of Babble node (default "192.168.1.3:1337")
          --babble.max-pool int         max number of pool connections (default 2)
          --babble.sync-limit int       max number of Events per sync (default 1000)
          --babble.timeout duration     TCP timeout milliseconds (default 1s)
          --eth.cache int               megabytes of memory allocated to internal caching (min 16MB / database forced) (default 128)
      -h, --help                        help for run

    Global Flags:
      -d, --datadir string   top-level directory for configuration and data (default "/home/martin/.monet")
      -v, --verbose          verbose output